####
# Writes a string to stderr
msg() {
  echo "${prog}: ${1}" >&2
}

####
# Writes a string to stderr and exit qith status code 1
quit() {
  msg "${1}"
  exit 1
}

####
# Reads stdin and forward it to stdout.
read_stdin() {
  while IFS="" read -r _line
  do
    echo "${_line}"
  done
}

####
# Packs an array in to a string
#
# Parameters:
# - $@: Array to be packed
pack_arr() {
  local _sep="$1"
  shift
  local _i
  for _i in "$@"; do
    printf '%s%s' "${_i}" "${_sep}"
  done | base64 -w 0
}

####
# Unpacks a packed array to an array
# Example:
# arr=($(unpack_arr s))
#
# Parameters:
# - $1: A string which packs an array
unpack_arr() {
  echo -n "$1" | base64 -d
}

bredcore_isddebug_enabled() {
  if [[ "${BREDCORE_DEBUG}" == "on" ]]; then
    return 0
  fi
  return 1
}

bredcore_debug() {
  if bredcore_isdebug_enabled ; then
    msg "bred-core: $*"
  fi
}

####
# Composes a string to initialize a file in "poorman's DFS"
#
# Parameters:
# - $1: A base directory of the local stroage of poorman's DFS
bredfs_compose_init() {
  local _conffile="${1}"
  local _fsbase="${2:?ERR _fsbase was not given}"
  local _s='echo "" | bred -r "mkdir -p %s/\${BRED_PARTID}/$(dirname ${STORE}) ; truncate -s 0 %s/\${BRED_PARTID}/$(dirname ${STORE})/$(basename ${STORE})" -T "-n" -c 1 '
  printf "${_s}" "${_fsbase}" "${_fsbase}"
}

####
# Composes a string to write file to "poorman's DFS"
#
# Parameters:
# - $1: A name node address (the host where bred/brp is installed)
# - $2: A base directory of the local stroage of poorman's DFS
bredfs_compose_write() {
  # nl -w 1 -b a ~/Documents/FSM.md | bred -r 'cat > /tmp/bredfs/${BRED_WORKER_IDX}/work/FSM.md' -T '-n' -c 1 >& /dev/null
  local _conffile="${1}"
  local _fsbase=${2:?"ERR:_fsbase was not given"}
  local _namenode=(${3:?"ERR:_namenode was not given"})

  local _f='nl -w 1 -b a -s " " ${APPEND} | ssh -o SendEnv=TO %s "bred -r '\''cat >> '${_fsbase}'/\${BRED_PARTID}/${TO}'\'' -T '\''-n'\'' -c '\''1'\''"'
  printf "${_f}" ${_namenode}
}

####
# Composes a string to read file from "poorman's DFS"
# If you are on a host not belonging to br.hosts, use '-' for the second parameter.
#
# Parameters:
# - $1: A base directory of the local stroage of poorman's DFS
# - $2: A partition id from which the data is read.
# - $3: A string which lists hosts read from br.hosts file.
bredfs_compose_read() {
  local _fsbase=${1}
  local _partid=${2}
  local _hosts=(${3})
  local _i
  local _s=''
  _s="sort -m "'${ORDER_BY:--k1,1 -n -S32M}'" "
  for _i in $(seq 0 $((${#_hosts[@]} - 1))); do
    _s="${_s} <(ssh ${_hosts[${_i}]} \""
    _s="${_s} cat ${_fsbase}/${_i}/"
    _s="${_s}"'${FROM:?FROM is mandatory}  | ${WHERE:-cat} | sort ${ORDER_BY:--k1,1 -n -S32M}'
    _s="${_s} \") "
  done
  _s="${_s}"'| bash -c "${SELECT:-cut -f 2- -d \ }"'
  echo "${_s}"
}

####
# Exports BREDFS environment variables
bredfs_exportenv() {
  local _host_idx="${1:?'Missing partition id (host idx)'}"
  local _conffile="${2:?'Missing conf file'}"
  ####
  # Load per user config
  declare -A sortmem
  if [ -r "${_conffile}" ]; then
    ####
    # Configurable parameters and their default values
    # Example
    #   baseport=10000
    #   hosts=(localhost localhost localhost localhost)
    #   namenode=${hosts[0]}
    #   workdir=/tmp/bred
    #   fsdir=${workdir}/fs
    #   jmdir=${workdir}/jm
    #   sorttmpdir=${workdir}/tmp
    #   sortmem[localhost]=32M
    #   defaultsortmem=256K
    source "${_conffile}"
  else
    echo "Config file '${_conffile}' was not found from $PWD.($1)($2)" >& 2
    exit 1
  fi
  local _hosts="${hosts[@]}"
  local _namenode="${namenode}"
  local _fsbase="${fsdir}"

  msg "_conffile: ${_conffile}"
  msg "_fsbase: ${_fsbase}"
  export BREDFS_INIT=$(bredfs_compose_init "${_conffile}" "${_fsbase}" | base64 -w 0)
  export BREDFS_WRITE=$(bredfs_compose_write "${_conffile}" "${_fsbase}" "${_namenode}" | base64 -w 0)
  export BREDFS_READ=$(bredfs_compose_read "${_fsbase}" "${_host_idx:-'-'}" "${_hosts}" | base64 -w 0)
}

####
# Executes a bredfs sub command.
#
# Parameters:
# - $1: A sub command name
#
# Environment variables:
# - BREDFS_INIT: $(bredfs_compose_init '/tmp/bredfs' | base64 -w 0)
# - BREDFS_WRITE: $(bredfs_compose_write "${_namenode}" '/tmp/bredfs' | base64 -w 0)
# - BREDFS_READ: $(bredfs_compose_read '/tmp/bredfs' "${host_idx:-'-'}" "${_hosts}" | base64 -w 0)
# - STORE:
# - APPEND:
# - TO:
# - SELECT:
# - FROM:
# - WHERE:
# - ORDER_BY:
bredfs() {
  local _func
  case "${1:?Operation must be specified. Do 'help' for list}" in
    # I couldn't simplify bredfs procedure execution procedure better than this.
    "init")   _func=$(echo -n ${BREDFS_INIT} | base64 -d);;
    "write")  _func=$(echo -n ${BREDFS_WRITE} | base64 -d);;
    "read")   _func=$(echo -n ${BREDFS_READ} | base64 -d);;
    "help")   _func='echo "init, write, read, or help can be used. reserved environment variables are following: SELECT=${SELECT} FROM=${FROM} WHERE=${WHERE} APPEND=${APPEND} TO=${TO} STORE=${STORE}"';;
    *)        exit 1;;
  esac
  eval ${_func}
}

# Export the environment variables
prog=${0}
bred_bindir=$(dirname $(readlink -e "${BASH_SOURCE}"))
bred_conffile="${bred_bindir}/bred.conf"
if [[ -e "${bred_bindir}/bred.testconf" ]]; then
  bred_conffile="${bred_bindir}/bred.testconf"
  echo "WARNING: bred is now in test mode. (config=${bred_conffile} is being used)" >& 2
fi      
  
bredfs_exportenv "${BRED_PARTID:-'-'}" "${bred_conffile}"
