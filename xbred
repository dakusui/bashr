#!/bin/bash -eu

################################################################################
#
#     'xbred'(crossbred): A controller program for multiple 'bred' scripts.
#
#                                                         dakusui@gmail.com
#
#  Mar/19/2015 Newly created.
#  * Naming convention in this script:
#    ENVIRONMENT_VARIABLE
#    _CONSTANT
#    global_variable
#    _local_variable
#    function_name
################################################################################

####
# Prints usage and exits with status code 2
usage() {
  echo "Usage: ${prog} "
  echo "       ${prog} -h for help."
  exit 2
}

####
# Writes a debug message
xbred_debug() {
  if [ "${XBRED_DEBUG:-off}" == "on" ]; then
    echo "${prog}: DEBUG: ${1}" >&2
  fi
}

####
# Checks pipe error
error_check() {
  local _pipestatus="${PIPESTATUS[@]}"
  local _exitcode=$?
  for _i in "${_pipestatus[@]}"; do
    if [[ ! "$_i" == 0 ]]; then
      echo "${prog}: ERROR: exitcode=${_exitcode}: pipestatus=${_pipestatus[@]}" >& 2
      return 1
    fi   
  done
  return ${_exitcode} 
}

####
# Quits with a given message and line number in .xbred file.
xbred_quit() {
  echo "${prog}: ${xbredfile#$PWD/}: ${xbredfile_linenum}: ${1}" >&2
  exit 1
}

####
# Reads a function (job) from a xbred file
read_xbred_func() {
  local _line=$1
  local _typename _funcname _args _scheme _jobdef
  local _regex=
  _regex="^function[[:space:]]+(map|reduce|local|pipe)[[:space:]]+([A-Za-z_][A-Za-z_0-9]*)[[:space:]]*"
  _regex="${_regex}\(([^\)]*)\)[[:space:]]*"
  _regex="${_regex}([a-z]+\:)(<<([A-Za-z0-9_]+)|(.+))$"
  if [[ "${_line}" =~ $_regex ]]; then
    local _c=0
    for _i in "${BASH_REMATCH[@]}"; do
      xbred_debug "INFO: ${_c}: ${_i}"
      _c=$((${_c} + 1))
    done
    _typename="${BASH_REMATCH[1]}"
    _funcname="${BASH_REMATCH[2]}"
    _args="${BASH_REMATCH[3]}"
    _scheme="${BASH_REMATCH[4]}"
    _jobdef=()
    _endmark="${BASH_REMATCH[6]}"
    if [[ "${_endmark}" == "" ]]; then
      _jobdef="${BASH_REMATCH[7]}"
    else
      local _tail="${BASH_REMATCH[5]}"
      local _next
      while read -r _next ; do
	xbredfile_linenum=$((xbredfile_linenum+1))	# Increment line number
	if [[ "${_next}" == "${_endmark}" ]]; then
	  break
	fi
    	_jobdef+=("${_next}")
      done
      local _i _c=0
    fi
  else
    xbred_quit "Illegal line: ${_line}"
  fi
  local _type=
  case "$_typename" in
    "map")    _type="M";;
    "reduce") _type="R";;
    "local")  _type="L";;
    *) msg "Unsupported function type '${_typename}'." && exit 1;;
  esac
  IFS="," read -r _interpreter _key _sinks <<< "${_args}"
  # _id _type _sinks _key _interpreter _task
  echo "${_funcname}"
  echo "${_type}"
  # Encode spaces to semicolons not to confuse the caller
  echo "${_sinks// /\;}"
  echo "${_key}"
  # Encode spaces to semicolons not to confuse the caller
  echo "${_interpreter// /\;}"
  case "${_scheme}" in
    file:)
      local _filecontent=$(<${_jobdef})
      if [[ -z "${_filecontent}" ]]; then
	xbred_quit "file not found or the file is empty ${_jobdef}"
      fi
      echo $(pack_arr $'\n' "${_filecontent[@]}")
      ;;
    inline:)
      echo $(pack_arr $'\n' "${_jobdef[@]}")
      ;;
    *)
      xbred_quit "Unknown scheme is specified '${_scheme}'"
      ;;
  esac
}

read_xbred_declare() {
  xbred_debug "START:read_xbred_declare"
  # declare -r varname=${var}
  # var  Abc123  'Hello World 123' '...
  #    0 ${line} ${line}           ${line}
  #    1 -r      -r                -r
  #    2 varname varname           varname
  #    3 Abc123  'Hello World 123' '...
  #    4 Abc123  
  #    5         Hello World 123
  #    6                           '...
  #      OK      OK                NG
  local _regex="^declare[[:space:]]+(-[^[:space:]]+[[:space:]]+)?([a-zA-Z_][a-zA-Z0-9_]*)=(([^'^[:space:]]*)|'([^']*)'|(.*))$"

  if [[ "${_line}" =~ $_regex ]]; then
    local _c=0
    for _i in "${BASH_REMATCH[@]}"; do
      xbred_debug "INFO: ${_c}: ${_i}"
      _c=$((${_c} + 1))
    done
    local _varname="${BASH_REMATCH[2]}"
    if [[ -n "${BASH_REMATCH[6]}" ]]; then
      xbred_quit "Illegal value: ${BASH_REMATCH[6]}"
    fi
    local _varvalue="${BASH_REMATCH[4]}"
    _varvalue="${_varvalue:-${BASH_REMATCH[5]}}"
    vars["${_varname}"]="${_varvalue}"
    xbred_debug "INFO: read_xbred_declare: ${_varname}=${vars[${_varname}]}"
  else
    xbred_quit "Illegal line: '${line}'"
  fi
  xbred_debug "END: read_xbred_declare"
}

read_xbred_file() {
  local _line
  while read -r _line
  do
    xbredfile_linenum=$((xbredfile_linenum+1))	# Increment line number
    if [[ "$_line" == "#"* || -z "$_line" ]]; then # Ignore lines which start with '#'
      continue
    fi
    case "${_line}" in
      function*)
	local _id _type _sinks _key _interpreter _packedtask
	read -r _id _type _sinks _key _interpreter _packedtask <<< $(read_xbred_func "$_line")
	xbred_debug "INFO: id=${_id},type=${_type},sinks=${_sinks},key=${_key},interpreter=${_interpreter},packedtask=${_packedtask}"
	if [ ${tasktype[${_id}]+_} ]; then
	  xbred_quit "The key ${_id} is defined more than once"
	fi
	tasktype[${_id}]=${_type}
	sinks[${_id}]=${_sinks//\;/ }
	key[${_id}]=${_key}
	interpreter[${_id}]=${_interpreter//\;/ }
	task[${_id}]=${_packedtask}
	connected[${_id}]=""
	;;
      declare*)
	read_xbred_declare "${_line}"
	;;
      *)
	xbred_quit "Syntax error: '${_line}'"
	;;
    esac
  done <"$1"
}

####
# Prints key of the first task referenced by task $1.
# If the task $1's has only one sink and it is '-'(stdout), 1 will be printed.
#
# Parameters:
# $1 task id to be executed
nextkey() {
  if [ "${sinks[$1]}" == "-" ]; then
    echo 1
  else
    local _sinks
    local _k
    IFS=" " read -ra _sinks <<< "${sinks[${1}]}"
    _k="${_sinks[0]}"
    currentkey ${_k}
  fi
}

####
# Prints key for task specified by $1
#
# Parameters:
# $1 task id
currentkey() {
  local _key="${key[${1}]}"
  if [ "${_key}" == "-" ]; then
    _key=1
  fi
  echo "${_key}"
}

####
# Prints sinks for the specified task
#
# Parameters:
# $1 task id
get_sinks() {
  local _sinks
  IFS=" " read -ra _sinks <<< "${sinks[${1}]}"
  xbred_debug "INFO: get_sinks: ${_sinks[@]}"
  echo ${_sinks[@]}
}

####
# Prints number of sinks of a task specified by $1
#
# Parameters:
# $1 task id whose sinks should be counted.
#
# Notes:
# * This function assumes validations should be done in advance.
# * Global variable 'sinks' is read by this function.
num_sinks() {
  local _numsinks=0
  IFS=" " read -ra _sinks <<< "${sinks[${1}]}"
  for _s in "${_sinks[@]}"; do
    _numsinks=$((${_numsinks} + 1))
  done
  echo "${_numsinks}"
}

####
# Checks if a kerconverter is necessary.
# Returns 1 if it is. 0 otherwise.
#
# Parameters:
# $1 source side task name
# $2 sink side task name
requires_keyconverter() {
  xbred_debug "INFO: requires_keyconverter: \$1=${1}, \$2=${2}"
  if [ "$2" == "-" ]; then
    return 0
  elif [ "${key[$1]}" == "${key[$2]}" ]; then
    return 0
  elif [ "${tasktype[$1]}" != "R" ]; then
    return 0
  fi
  return 1
}

####
# Checks if sort is necessary before sink side task is executed.
# Returns 1 if it is. 0 otherwise.
#
# Parameters:
# $1 source side task name
# $2 sink side task name
requires_sort_on_out() {
  local _num_sinks=$(num_sinks $1)
  if [ "${_num_sinks}" -gt 1 ]; then
    xbred_debug "INFO: requires_sort_on_out: NO: more than one sinks (${_num_sinks})"
    return 0
  fi
  local _s="${sinks[$1]}"
  if [[ "${_s}" == "-" || ! "${tasktype[${_s}]}" == "R" ]]; then
    xbred_debug "INFO: requires_sort_on_out: NO: non-R sink"
    return 0
  fi
    xbred_debug "INFO: requires_sort_on_out: YES"
  return 1
}

####
# Prints a key converter command line.
# Returns 1 if key conversion is necessary, 0 otherwise.
#
# Parameters:
# $1 source side task name
# $2 sink side task name
# $3 task id for keyconverter
compose_keyconverter() {
  xbred_debug "START: compose_keyconverter: \$1='$1' \$2='$2'"
  local _logfile="${logdir}/converter-${1}-${2}.log"
  local _k1="${key[$1]}"
  if [[ "${_k1}" == "-" ]]; then
    _k1=1
  fi
  local _k2="${key[$2]}"
  if [[ "${_k2}" == "-" ]]; then
    _k2=1
  fi
  local _cmd="bred -e ${_logfile} -c ${_k1} -s ${_k2} -M map -I \"sh -c\" -r 'cat'|"
  xbred_debug "END: compose_keyconverter: ${_cmd}"
}

compose_single_task() {
  requires_sort_on_out "$1"
  local _requires_sort_on_out=$?
  local _sort_on_out="-O no"
  local _logfile="${logdir}/task-${1}.log"
  local _tasktype=${tasktype["${1}"]}
  local _cmd=""
  if [ "${_requires_sort_on_out}" == 1 ]; then
    _sort_on_out="-s \"$(nextkey ${1})\""
  fi
  # value ${task[${1}]} itself is already quoted, so we don't need to quote it in _cmd again.
  local _tmp_file=$(mktemp)
  local _task
  IFS=$'\n' _task=($(unpack_arr "${task[${1}]}"))
  xbred_debug "INFO:compose_single_task(tmp_file):${_tmp_file}"
  xbred_debug "INFO:compose_single_task(packed):${task[${1}]}"
  xbred_debug "INFO:compose_single_task(unpacked):${_task}"
  local _i
  for _i in "${_task[@]}"; do
    xbred_debug "INFO:compose_single_task(loop):${_i}"
    printf "%s\n" ${_i}>> "${_tmp_file}"
  done

  if [[ "${_tasktype}" == "M" ]]; then
    _cmd="bred -e ${_logfile} -c \"$(currentkey ${1})\" ${_sort_on_out} -M map -I \"${interpreter[${1}]}\" -f yes -r '${_tmp_file}'"
  elif [[ "${_tasktype}" == "R" ]]; then
    _cmd="bred -e ${_logfile}  -c \"$(currentkey ${1})\" ${_sort_on_out} -M reduce -I \"${interpreter[${1}]}\" -f yes -r '${_tmp_file}'"
  elif [[ "${_tasktype}" == "L" ]]; then
    _cmd="BRED_CORE=${BRED_CORE} ${interpreter[${1}]} '${_tmp_file}'"
  else
    xbred_quit "Unknown task type ${_tasktype} was specified."
  fi
  local _envvars="BRED_SELF='${xbredfile}'"
  for _i in "${!vars[@]}"; do
    _envvars="${_envvars} ${_i}='${vars[$_i]}' BREDVAR_${_i}='${vars[$_i]}'"
  done
  _cmd="${_envvars} ${_cmd}"
  echo "${_cmd}"
}

compose_task() {
  xbred_debug "START: compose_task: '$1'"
  local _i
  local _num_sinks=0
  local _cmd=""
  # count number of sinks for this task
  _num_sinks=$(num_sinks $1)
  if [[ "${_num_sinks}" -le 0 ]]; then
    xbred_quit "No sink was defined for task ${1}."
  elif [[ "${_num_sinks}" == 1 ]]; then
    local _s="${sinks[${1}]}"
    xbred_debug "INFO: compose_task: output of '$1' is cascaded to a single sink '${sinks[${1}]}'"
    if [ "${_s}" == "-" ]; then
      _cmd="$(compose_single_task ${1}) > ${bredout} &"
    else
      _cmd="$(compose_single_task ${1}) | $(compose_task ${_s})"
    fi
  else
    local _sinks=$(get_sinks "${1}")
    local _tee="tee"
    # $_s for a sink
    xbred_debug "INFO: compose_task: output of '$1' is cascaded to multiple sinks '${_sinks[@]}'"
    for _s in ${_sinks[@]}; do
      xbred_debug "INFO: compose_task: ${_s}"
      requires_keyconverter "${1}" "${_s}"
      local _ret=$?
      local _keyconverter=""
      local _subtask=$(compose_task "${_s}")
      if [ "$_ret" == 1 ]; then
	_keyconverter=$(compose_keyconverter "${1}" "${_s}")
      fi
      _tee="${_tee} >(${_keyconverter} ${_subtask} > /dev/null)"
    done
    _cmd="$(compose_single_task ${1}) | ${_tee} > /dev/null"
  fi
  xbred_debug "END: compose_task: '$1': '${_cmd}'"
  echo "${_cmd}"
}

exec_single_task() {
  xbred_debug "START: exec_single_task"
  local _cmd="$(compose_single_task ${1})"
  xbred_debug "END: exec_single_task: '${_cmd}'"
  eval "${_cmd}"
  error_check
  return $?
}

exec_task() {
  xbred_debug "START: exec_task: '$1'"
  local _cmd="$(compose_task ${1})"
  xbred_debug "END: exec_task: '$1': '${_cmd}'"
  eval "${_cmd}"
  error_check
  return $?
}

####
# Counts and prints number of tasks including 'converters'.
#
# $1 current task's name
# $2 number of tasks
count_tasks_in_xbred_file() {
  local _num=${2:-0}
  if [ "${tasktype[$1]}" == "M" ] ; then
    _num=$((${_num} + 1))
  elif [ "${tasktype[$1]}" == "R" ] ; then
    _num=$((${_num} + 1))
  fi
  local _sinks=""
  IFS=" " read -ra _sinks <<< "${sinks[${1}]}"
  first=1
  for _s in "${_sinks[@]}"; do
    if [ "${_s}" == "-" ]; then
      continue
    fi
    requires_keyconverter "${1}" "${_s}"
    local _ret=$?
    if [ "${first}" == 0 ] && [ "$_ret" == 1 ]; then
      _num=$((${_num} + 1))
    fi
    first=0
    _num=$(count_tasks_in_xbred_file "${_s}" "${_num}")
  done
  echo ${_num}
}

####
# Parses user options and assigns them to global variables that follow.
# * bredtask
# * jobmode   (default=normal)
# * xbredfile (default=(none, mandatory))
#
# Parameters:
# $@ command line arguments
parse_opts() {
  local _name="";
  bredtask=""
  jobmode="normal"
  while getopts "k:m" _name; do
    case "${_name}" in
      k)   bredtask=${OPTARG};;
      m)   jobmode=${OPTARG};;
      [?]) usage $0;;
    esac
  done

  ##
  # Validations
  # -k (bredtask)
  xbred_debug "bredtask=${bredtask}"
  if [[ "$bredtask" =~ [^a-zA-Z0-9] ]]; then
    quit "Task name can contain only a-zA-Z0-9"
  fi
  # -m (jobmode)
  case ${jobmode} in
    normal|single) ;;
    *) quit "Unknown jobmode ${jobmode} is specified.(-m)";;
  esac
  
  shift $(( OPTIND - 1 ))
  xbredfile=$(readlink -e "${1}")
}

################
#
# MAIN
#
main() {
  # Initialize global variables
  prog="`basename $0`"
  parse_opts $@
  # workdir is defined in bred.{conf,testconf}
  mkdir -p "${workdir}/xbred"
  xbreddir=$(mktemp -d $(date  +"${workdir}/xbred/%Y%m%d-%H%M%S.XXXXX"))
  logdir="${xbreddir}/logs"; mkdir "${logdir}"
  tmpdir="${xbreddir}/tmp"; mkdir "${tmpdir}"
  bredout="${tmpdir}/out"
  msg "session directory='${xbreddir}'"
  declare -A tasktype
  declare -A sinks
  declare -A key
  declare -A interpreter
  declare -A task
  declare -A connected
  declare -A vars
  xbred_debug "START: main: args='${@}'"
  xbred_debug "INFO: main: ${BRED_CORE}"

  # read records from job definition file
  read_xbred_file "${xbredfile}" $(dirname "$xbredfile")
  # If bred task isn't by user, pick up the first one in the xbred
  # file and useit
  firsttask="${bredtask:-main}"
  # Dirty trick to check if an associative array has a key '$firsttask'
  [[ -n "${tasktype[$firsttask]+isset}" ]] || quit "Task '$firsttask' is not defined."
  numtasks=$(count_tasks_in_xbred_file ${firsttask})
  xbred_debug "INFO: main: firsttask=${firsttask} numtasks(effective)=${numtasks}"
  local _exitcode=99
  if [ "$jobmode" == "normal" ]; then  
    # start pipleline
    msg "starting pipeline"
    mkfifo "${bredout}"
    read_stdin | exec_task "${firsttask}"
    _exitcode=$?
    cat "${bredout}"
    rm "${bredout}"
    msg "done"
  elif [ "$jobmode" == "single" ]; then
    read_stdin | exec_single_task "${firsttask}"
    # error_check
    _exitcode=$?
  else
    quit "Unsupported job execution mode '$jobmode' is specified."
  fi
  xbred_debug "END: main"
  return ${_exitcode}
}

####
# Writes a debug message
xbred_debug() {
  if [ "${XBRED_DEBUG:-off}" == "on" ]; then
    echo "${prog}: DEBUG: ${1}" >&2
  fi
}

BRED_CORE="$(dirname $(readlink -e $0))/bred-core"
. ${BRED_CORE}
xbredfile=(stdin)
xbredfile_linenum=0
main $@
exit $?

